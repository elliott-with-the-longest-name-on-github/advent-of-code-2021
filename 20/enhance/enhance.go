package enhance

import (
	"fmt"
	"strings"
)

const PADDING int = 2

// Image represents a two-dimensional image made up of booleans, with an enhancement pattern.
type Image struct {
	Bitmap               [][]bool
	EnhancementAlgorithm []bool
	infiniteVoidIsOn     bool
}

func PartOne() (header string, body string) {
	im, err := FromStrings(ChallengeImage, ChallengeAlgorithm)
	if err != nil {
		panic(err)
	}
	pixels := im.Enhance().Enhance().LitPixelCount()
	header = fmt.Sprintf("Part one: Found %v lit pixels after enhancing twice.", pixels)
	body = im.String()
	return
}

func PartTwo() (header string, body string) {
	im, err := FromStrings(ChallengeImage, ChallengeAlgorithm)
	if err != nil {
		panic(err)
	}
	for i := 0; i < 50; i++ {
		im = im.Enhance()
	}
	pixels := im.LitPixelCount()
	header = fmt.Sprintf("Part two: Found %v lit pixels after enhancing fifty times.", pixels)
	body = im.String()
	return
}

func FromStrings(bitmap []string, algorithm string) (*Image, error) {
	alg, err := parseStringToBoolSlice(algorithm)
	if err != nil {
		return nil, err
	}

	boolBitmap := make([][]bool, len(bitmap))
	for i, str := range bitmap {
		bools, err := parseStringToBoolSlice(str)
		if err != nil {
			return nil, err
		}
		boolBitmap[i] = bools
	}
	im := &Image{
		Bitmap:               boolBitmap,
		EnhancementAlgorithm: alg,
		infiniteVoidIsOn:     false,
	}
	return im, nil
}

func (im *Image) Enhance() *Image {
	for !im.reduce() {
		im.pad()
	}
	yLen := len(im.Bitmap)
	xLen := len(im.Bitmap[0]) // assumes all rows are same length

	// don't cause the 3x3 grid to read off the edge of our padding
	startY := PADDING - 1
	endY := yLen - (PADDING - 1)
	startX := PADDING - 1
	endX := xLen - (PADDING - 1)

	outer := make([][]bool, yLen)
	// we know these rows are blank and we don't really care about pointer sharing
	// since they won't be modified
	for i := 0; i < startY; i++ {
		outer[i] = im.Bitmap[i]
	}
	for y := startY; y < endY; y++ {
		row := make([]bool, xLen)
		for i := 0; i < startX; i++ {
			row[i] = im.Bitmap[y][i]
		}
		for x := startX; x < endX; x++ {
			enhancementIndex := im.findPixelEnhancementValue(x, y)
			newPixel := im.EnhancementAlgorithm[enhancementIndex]
			row[x] = newPixel
		}
		for i := startX; i > 0; i-- {
			row[xLen-i] = im.Bitmap[y][xLen-i]
		}
		outer[y] = row
	}
	for i := startY; i > 0; i-- {
		outer[yLen-i] = im.Bitmap[yLen-i]
	}
	im.Bitmap = outer
	im.toggleInfiniteVoid()
	return im
}

func (im *Image) LitPixelCount() int {
	counter := 0
	for _, row := range im.Bitmap {
		for _, val := range row {
			if val {
				counter += 1
			}
		}
	}
	return counter
}

func (im *Image) Print() {
	fmt.Print(im.String())
}

func (im *Image) String() string {
	var sb strings.Builder
	for _, row := range im.Bitmap {
		for _, val := range row {
			if val {
				sb.WriteString("#")
			} else {
				sb.WriteString(".")
			}
		}
		sb.WriteString("\n")
	}
	return sb.String()
}

func (im *Image) PrintEnhancementAlgorithm() {
	fmt.Print(im.EnhancementAlgorithmToString())
}

func (im *Image) EnhancementAlgorithmToString() string {
	var sb strings.Builder
	for _, val := range im.EnhancementAlgorithm {
		if val {
			sb.WriteString("#")
		} else {
			sb.WriteString(".")
		}
	}
	return sb.String()
}

func (im *Image) toggleInfiniteVoid() {
	lastIndex := len(im.EnhancementAlgorithm) - 1
	if im.EnhancementAlgorithm[0] && im.EnhancementAlgorithm[lastIndex] {
		panic("you're going to turn the entire world on and you'll never turn it back off!")
	}
	if im.EnhancementAlgorithm[0] && !im.EnhancementAlgorithm[lastIndex] {
		im.infiniteVoidIsOn = !im.infiniteVoidIsOn
	}
	if !im.EnhancementAlgorithm[0] {
		im.infiniteVoidIsOn = false
	}
}

// Reduce trims the edges of the image until there is only as much
// padding as specified. It returns the number of padding
func (im *Image) reduce() bool {
	leastFilledYIndex := -1
	greatestFilledYIndex := -1
	leastFilledXIndex := -1
	greatestFilledXIndex := -1
	for y, row := range im.Bitmap {
		for x, val := range row {
			if val {
				if leastFilledYIndex == -1 {
					leastFilledYIndex = y
				}
				if leastFilledXIndex == -1 || x < leastFilledXIndex {
					leastFilledXIndex = x
				}
				if y > greatestFilledYIndex {
					greatestFilledYIndex = y
				}
				if x > greatestFilledXIndex {
					greatestFilledXIndex = x
				}
			}
		}
	}
	if leastFilledYIndex <= PADDING || len(im.Bitmap)-greatestFilledYIndex-1 <= PADDING || leastFilledXIndex <= PADDING || len(im.Bitmap[0])-greatestFilledXIndex-1 <= PADDING {
		return false
	}

	startY := leastFilledYIndex - PADDING
	endY := greatestFilledYIndex + PADDING + 1
	startX := leastFilledXIndex - PADDING
	endX := greatestFilledXIndex + PADDING + 1
	rowLen := endX - startX
	outer := make([][]bool, endY-startY)
	for y, i := startY, 0; y < endY; y++ {
		row := make([]bool, rowLen)
		for x, j := startX, 0; x < endX; x++ {
			row[j] = im.Bitmap[y][x]
			j++
		}
		outer[i] = row
		i++
	}
	im.Bitmap = outer
	return true
}

func (im *Image) pad() *Image {
	yLen := len(im.Bitmap) + (PADDING * 2)
	outer := make([][]bool, yLen)
	xLen := len(im.Bitmap[0]) + (PADDING * 2)

	// we can abuse the fact that the default value of bool is false
	for i := 0; i < PADDING; i++ {
		outer[i] = make([]bool, xLen)
	}
	for i, line := range im.Bitmap {
		row := make([]bool, PADDING, xLen)
		row = append(row, line...)
		row = append(row, make([]bool, PADDING)...)
		outer[i+PADDING] = row
	}
	for i := PADDING; i > 0; i-- {
		outer[yLen-i] = make([]bool, xLen)
	}
	im.Bitmap = outer
	return im
}

// findPixelEnhancementValue scans the 3x3 grid around x, y to find the integer
// index we should use to look up the new pixel value in the EnhancementAlgorithm.
// Because this function is internal, it expects that it will not receive indices
// that would cause an out-of-bounds error. We're also assuming that we're properly padded:
// the padding should be 2 rows/columns around the image as it currently is. We will pretend
// that the padding's values are equal to im.infiniteVoidIsOn.
func (im *Image) findPixelEnhancementValue(x, y int) int {
	value := int16(0)
	// "Where's the image?"
	// The image is BETWEEN (non-inclusive) these indices.
	yLowerBound := PADDING
	yUpperBound := len(im.Bitmap) - PADDING - 1
	xLowerBound := PADDING
	xUpperBound := len(im.Bitmap[0]) - PADDING - 1
	for yOffset := -1; yOffset < 2; yOffset++ {
		for xOffset := -1; xOffset < 2; xOffset++ {
			yCoord := y + yOffset
			xCoord := x + xOffset
			pixelState := false
			if yCoord > yUpperBound || yCoord < yLowerBound || xCoord > xUpperBound || xCoord < xLowerBound {
				// pixel is outside of image; pretend it is whatever the infinite void is set to.
				pixelState = im.infiniteVoidIsOn
			} else {
				pixelState = im.Bitmap[yCoord][xCoord]
			}
			if pixelState {
				// This is just bit-wizardry to push 1s
				// onto our value.
				// Basically, if yOffset=-1 and xOffset=-1,
				// we would push the bit (-3*(-1-1))+(1-(-1)) = 8 places (to the 9th bit),
				// and if yOffset=1 and xOffset=1,
				// we would push the bit (-3*(1-1))+(1-1) = 0 places (to the 1st bit).
				value |= (int16(1) << int16((-3*(yOffset-1))+(1-xOffset)))
			}
		}
	}
	return int(value)
}

func parseStringToBoolSlice(str string) ([]bool, error) {
	runes := []rune(str)
	bools := make([]bool, len(runes))
	for i, r := range runes {
		if r == '#' {
			bools[i] = true
		} else if r == '.' {
			bools[i] = false
		} else {
			return nil, fmt.Errorf("input strings may only contain the fullstop and pound characters, but found %s", string(r))
		}
	}
	return bools, nil
}

var ChallengeAlgorithm string
var ChallengeImage []string = []string{
	"##.##...#.##...####.#.#..######......#.##.#.#.###......#.#...##..##.###.###.##.#..#..#.....#..####..",
	"#######...##..#....#..####..##.##.#.##.##.##..#...##.##..##..#..##....#########....##........###...#",
	"##.#.###...#...###.#####..#..#.##..#....#####..##.#..#..#....##.#..#.#..#...#.##....##.##......#####",
	"..#...##..##..#.###..###.#.###.##.#.###.##.####..#.#.##....#..##.###.##..##......#.#####.##..#.#.#.#",
	"#.........#.##.#.#....#..#..##..###..###.#...##.#.#.###.##..#.##.......###.###...#..##.#####.#...#.#",
	".##..####.#.###.#..#.......####.....#.###...####.#.###..####..#.......##.##.##########..#.#.#..#.#..",
	"#..#.###..#.##..######.....#######.##.#.#...##..#.##...##..#.##..###..######..#.##.....##...#.#.#.#.",
	"###..#..###.#.#.#...#####...#.#..#.##....##.#.##..#..###.#..##..####.######.#.#...#.#..#.####...##.#",
	"#....#...#####.###.######..#....##.#....#####..#.#####...#.#...#.#.#.######...##...##.##..####.##..#",
	".###..####.#..##.#####.#...#....####.#.##..##..###....#.#..##...#..#..####.####...#...#....###..##.#",
	"..#...####.##.#.#.##.#..##.....#.#.###.#.#.##....##........#...##...#.#.####.##..#...#.#.....#..#..#",
	".##....#....#.##.##.......####.#.###.#..##..#.#..#..#.....#.##.###..##.##..#.####.######.#.##..#.##.",
	"..##.#..#.#..#.#....######.....#..##...#......##....#...#..#.#...#..#.#.#####....####.###.#.#####...",
	"#.#...#.####.###..#.#.####.####...###.###.#.#..##........#..#...##.###....##..#..##.#.####.#.##..##.",
	"###.###.#.#.......###.#....####..##.#....#.####...#..#.#.##.....##..##......#####...#..##.....##.#.#",
	"#...###.#.#..#.#.#..####.######..#..##.###..#....#..#..##.##..##.###...####..#..#..####..#.#####.##.",
	"..#.##....#.###...#######..##.#.##..###...#...#....####.#.##.####....##..###...##.#.####..#..#..#.#.",
	"#######..#.#.#.#.###..###..###.....#####..######.#.#..#.#.#..#.#.#.#...#.#..##....#.####.###.##.#.#.",
	"..###...##.#.#######.....###..##.#..###....##........##..#..#.##.#.####.##....#####.##..##...##....#",
	".#..#..#...##.#.##..#.#.##.##.######..#.####...#.......####....#.###..#....#.#........####.#...#.##.",
	"##..#.#...#.#.##.#..#.##.......##.#..#.#.#.#.####.##....#.#...#....######.#......#.##.#.##...#.##..#",
	"#.#.#.#########...#.##..#...###....#..#..#.###.##...#.#..#...#.#...#.###.#.#.##..##....###...#.#...#",
	"##..###.#.####.##..##.##.###.##.#.#..##..#######...#...#.###.#.##.##.#...#.....#.#.#####..##.#.##.#.",
	"...#..##...###########.#.#####.###.#.......#....#####..#.#.###..#....#...###...#..##.###...##.###.##",
	"##.......#....####..#...##.####..#.#..#..####......#.....#.##.#.##..#...#.####.#.#.#.##...#...#..#..",
	"#.....##.#......##.####.##.#....#.####..#..##.#..#.##.#.#..###.##..#.#..####......##.#..##..####....",
	".#.##.##..#...########.#.#.......#...#.###..#...#..#..##.#.#...#####..#..######..#..#.#...###..##.#.",
	"##.##..##...#.##.##.#.###.#.....##.#...####.###.#.#..#...##.#.#...###..###..#...#.#..##......#..###.",
	"####..#.#..#...##.###....#..##.##.##.#..#..#.##..##...#.#.#.#...#.#......####.#.#..#......##.##.....",
	"##.....##..#...##.######.#....#.###....####.##.##.###.#.##..####.#...##.##.#.##.....#..###.#.....###",
	"#.#..#..#.#....##.#.##.#...##.#.#..##.#.##...#...###.#...#####.#.....##.#.#...##.....######..#.#.###",
	"...#.#..##.....####.#.#..#.#.###.....##..#.#..#.##..#.#.##..##...##...#.####.#.#.##...####.#.#.#.#.#",
	"...##.##...#####.#.#..###.####.#.#.#.#.#####.#.######.####.#.#.##.####.####..###.#...###..#.#.#.####",
	"#..##.#.##.#..#.##.##...#.#.##.#.##..#.###.###..#.##....##.####....##..#.#.##.####.#....##..#.#..#..",
	"#.######.##.###.#.#...##...##...#.###..###.#.......#.###...#..##.....#..#.......##.###.....#.##..#.#",
	"..#.##.#...##.#..#...###.#.##.###...#...#...#..###...#..#...######.###.#.....#.###.#..###.....#...#.",
	"##.#.#.......###.#.#....#..#.#.#..#..#.###.##.#..#..###.###.#....#.......###....##.#.###.###.###...#",
	"...##.###..#...#.#...##..##..#.#.#...#.##..#.....#..#...###..##.##.##.....####..#.#.#..##..##..#..#.",
	"#......#####..#.###.....##...######.......#..####....#.#.#...#.#..#.####.#...###...#..#.#.##...#.#..",
	"#.##...#.##.##...##....#....####.##..#....#..##....#..#.##.......######.#.##.###.##....#.#.#.....##.",
	"#####.#.....###....##..#####..#.#.##.##.#.#.#...####.###.###..#....#...##.#.#....#..####.#...###..##",
	"#.#####..##...######.######....#.#.#..##.##.######..##...#...####..##.##.#.#....#.#.#.#..#...#...#..",
	".###.#.##.#.#.##.##....#..####.#..##.#.##....###.##...#....#..###..##.#########..##.......##.....#.#",
	"##..#.##..#..#.#.#..#...##...##########...##.##..#..#.#.###########.....#######....#....#.###.#...#.",
	"...##.#..##...#..#.##...###...####.#...#####.####..#.###..###....###..#..#####.#.##.#.##....#......#",
	"..##..##...###.#.#.#..#.#####..#.##..#..#...###.###..##....#.#.##...###..#.###..#.#.##.###.##....###",
	".#.#.#######.#..#.....#.##.###...##.##.###.##..##...###..#.##...###.#..##..###.#.####.#..##..##...#.",
	"#.####.#.#....###...###....##...##.....#.###.#.....#..#...#..####.#...#..#######...###.#........#...",
	"..##...#.#..###..##..#.#..####.#...#.##.#...#.#..###..#.##.#.#.#...###..######....#.###.#.#.#..##.#.",
	"###.#.#.....###..#....###.#.......##...#..#.###..###.#......#...##..#.#..###..#.##.#.##.######.#.#.#",
	"#...###.#.#....#.####....##.###...##..##....#####....#......#.#.......###...#.#..#.#....#....####.#.",
	"#.#.##.######..#.#.######.#...#..###.#..####..#.##..###.#.#.#.###..#..#.#....#..#.##.#..##.####.##.#",
	"#.##.#.###...#.##.#..#.#....#.####...#.###...#..###......#.########....#.#####..#.#.#..#...#.####.#.",
	"####...#.#.##.###...##.#....#.#..######.#.######.#.##.#.#.#..#...#.###.#..#.####.#..#.#....#....#.##",
	"##.##.....#.##..#......#....###.#..#######.#...##..#.#...##..##.#.#..##.###.######.....###.##.##..##",
	"..####.##.#####....#.#..#.#.#.########.#.###........#..###...###........####.##.##.#.#..#.##.....#.#",
	"...#.#..#.#.###.....##.#.##.#.##..#.##..#..####........###..####..##..#.####..#...#.####.##.#.#.##.#",
	".##.#.#..#####..#####.#.....##.#.####.#.###..#..##.#..####.###.##.###.###.#..#..##....#.##.....#.#..",
	".#...####..##.###....##..#..##.###..#..##....#...##.###.###.#...##..###.#..##.#.##...##.##.#..##.#..",
	".#.##.##.####.###.#.#..##.....####.##..######.###..#.#.##..##.#.#.....#.#############..#..#..###..##",
	".#.#..###...###..###.#....###.....##.#.#..###..####..##.##.#.##...########..##..####.##.##.##.#.#...",
	"...#.##.###.#..#..##...#..##..#.....##..#.#..###..#...#...##.#.#..#.###.#####..#.....##...###.######",
	"##...#..##.#.##.##...#.....#....#...##.###...#####..#..##.##.###..#.###.##..#.#..##.##..#.#...######",
	".##.#..###.###....#.###.#..#..#..##...############...#########.#..#.###...###....#..#.########.#.##.",
	".........###..##.####.#.#...#..##.#...###....###.##.######.#..#.#..###.###.#.###.##.##.##..#.#.#.#..",
	".##....###.#.###.#.#..##...#.#...#.##....###...##.#..#######....##..#...#...#....##.##..####.######.",
	"###.####...##.#.###.....#..######....###..#.#.#..#######..#..#.##.#.####.###.#....#..#.#...##..#.#..",
	"##..#.#####.###...#..#.......###.###..##.....##...#.##.##..###.####..#...#.#.##.#.#...##....#.##.###",
	"#...####......###.##..#..####.##.#.###.##.#.#....#.....#..#...###..##..##..#.##..###.#.##.###....#..",
	"#..##.#..####...##.##.####..#....#......###...##.#.#..#.#.....#..##..###..#.##.##.#..####..##.#.####",
	"....#..#......##....###...#.##..##.#...#.....#..##.#.###..#...#...........##..#####....#..#.##...#..",
	"...#..####.#.#####.####...#..#..#..###.#.#.#.##.##......#.####........##.#.....#..###.#..#..##..###.",
	"#######.#.#..#.##..#.#.##.#..#..#......#.#..####....#####.#.....###.#.#..##.#..#..##.#..###..#.###.#",
	"#....#.#.##.##...#..##.####....###....#...#..###..##.######...#.##.##.##.#.#.#.#####.##.#.####.###.#",
	"...#.#..#..#....#...###..#.#..#...#..##...#..##.#.###.#.##...#####......#.##.#..#.###..##.##...#.#.#",
	".#.##.....#####.#.#####..###.#.###....##...#.....##...###.##.#.#.#...##.......###....##..##...##....",
	"####.#...##.#####.##..####.########...#..#..#....#.##.###..###.##.##..###.###.######..##...#......##",
	".##...###..###..#.####.##.##...#.....####.###.##.#.##..#.#.#.#.#....##.#######.##.##..#...#....#####",
	".###.##....#.#......#.##....#..###.##..##..##..##..#.......#..#.#.###...#..####.##.#.##..###..##.##.",
	"....######.#..#.##.##.#####..#.##.#.#.#.##..#..#.########.#####..###.###.#...#..##.#......##.#.#.#..",
	".#.#.#...###.#.#.#....###.####..#.##....#......#...#.#.##.##.#..###.....#.#.##..##.#..###.#.#.####..",
	"##....########.#..#####...#.....##.#.....##.#...####..####..#......##...#..#..##..#..#.##..###..##.#",
	"##..####.#####.#.#.#.#.###.###..#..#...##.#.#....#.#..#.#.###..#.##...#.#.##.#.##.##....#..######.##",
	"#..#.....#.#..#.#.#..##..#....#.#.###.#.#..#..###..#.#...###..##...####.##..#..#...#.#...###.##..##.",
	"...#..#...####.##.###.#####.###.##..###.#....##..##...#.###.#...#...#.............##...####.####.#.#",
	".###.##...##.#.###.#.#...##.#..#...#####..##.#.#...##.#######.####....####....#######.#...#.#.###...",
	"....#.#...##.#.####.#####.#.######.#####.##...####...###.#.##.####..##.###.###....#.....#####.....#.",
	"......##.#.#....#.#..##..#.#.###...##.##.####.#....##...##...##...#...#.###.#.##...#..####....##....",
	".#####..#.#####...##.#...###.#.#..#.#..##..#.#.#.##..#.##....###..###..#..##...##..#.###.#.##....###",
	"#####....#.#...##.###.#....###.##.........#..##..###.#...######.#..#.#.########.....###.#.#...#.....",
	".##.#.#####.#..#.#.#.###...########.###..##.#..#.####.#...##.#....#...##.######..##....##....##.##..",
	"###...##.##..####...#.#.#..##.....###..#..##..#.####.###..#.#.##.######...#.#...###.##..#....##.#.##",
	"##..##.#..#..#.###.#..#..#....#..#....###.####.###...#.##.##.##......##.####...#.....#...#.#...#..#.",
	"....#.##...#..##.##......#.#.#..####....#..#######.#...#...##..#......#.#........##.##....###....##.",
	"##.#...#...##.###.###..####.#...#..##...##.###..#..###..#.....#...###..###.##..#..#####.....####.##.",
	".##.#...#..####..#.....##..###.#.#.#..#...##...###...#..##.....#..##...##..###.#..#####...##.#..###.",
	".#.#.#..####...#.###.###....##....#.#..#.#..#..#####.#..#...#.###.........##.####.####..#.##..##..#.",
	"#..##.####.#..##....#.####.###...#.#..#####.##.#..#......###.##...#....#.##..#....##.#.....#.##.##.#",
	"#..#..#.###.#..#.#.####.####..#.#.#..#.#...#....#######.####.............####..###.#..####.######.##",
	".#....####...#...#...#..#..##......#######.###.##..####.##.####.#####....##.###.#.###..#.#....#...#.",
}
